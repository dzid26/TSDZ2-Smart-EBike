name: Build
on: 
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'     
        required: true
        default: 'warning'
  push:
    paths:
    - ".github/workflows/*"
    - "src/*"
    - "tests/*"
    - "pyproject.toml"
    - "setup.py"
  pull_request:
    paths:
    - "src/*"
    - "tests/*"
    - "pyproject.toml"
    - "setup.py"

env:
  SDCC_VERSION: 4.4.0

jobs:
  Build_Windows:
    runs-on: windows-latest
    steps:
      # - name: Start SSH session
      #   uses: luchihoratiu/debug-via-ssh@main
      #   with:
      #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      #     SSH_PASS: ${{ secrets.SSH_PASS }}
    - name: Install SDCC
      run: |
        Invoke-WebRequest -UserAgent "Wget" -Uri https://sourceforge.net/projects/sdcc/files/sdcc-win64/$env:SDCC_VERSION/sdcc-$env:SDCC_VERSION-rc3-x64-setup.exe/download -OutFile sdcc_setup.exe
        Start-Process -wait -FilePath "sdcc_setup.exe" -ArgumentList "/S", "/D=C:\Program Files\SDCC"
        echo "Adding SDCC to PATH"
        Add-Content $env:GITHUB_PATH "C:\Program Files\SDCC\bin"
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    # this mainly checks whether tests compile and work on windows. The actual test report runs on Ubuntu job
    - name: Check testing framework
      run: |
        pip install -e .
        rm tests/sim/_tsdz2.cdef # make sure cdef is generated from the source to check testing framework
        pytest
    - name: Build
      run: |
        cd src
        make clean
        make CFLAGS=--Werror
    - uses: actions/upload-artifact@v4
      with:
        name: firmware_from_windows
        path: bin/main.hex

  Build_Linux:
    runs-on: ubuntu-latest
    steps:
      # - name: Start SSH session
      #   uses: luchihoratiu/debug-via-ssh@main
      #   with:
      #     NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}
      #     SSH_PASS: ${{ secrets.SSH_PASS }}
      - name: Install SDCC
        run: |
           cd ~
           wget https://sourceforge.net/projects/sdcc/files/sdcc-linux-amd64/$SDCC_VERSION/sdcc-$SDCC_VERSION-amd64-unknown-linux2.5.tar.bz2/download -O sdcc-amd64.tar.bz2
           sudo tar xf sdcc-amd64.tar.bz2
           cd sdcc-$SDCC_VERSION/
           sudo cp -r * /usr/local
           sdcc --version
           sdcc --print-search-dirs
      - uses: actions/checkout@v4
      - name: Build
        run: |
          cd src
          make clean
          make CFLAGS=--Werror
      - uses: actions/upload-artifact@v4
        with:
          name: firmware_from_linux
          path: bin/main.hex


  Tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install -e .
          pip install --upgrade pytest-md-report
      - name: Run tests
        env:
          REPORT_OUTPUT: md_report.md
        shell: bash
        run: |
          rm tests/sim/_tsdz2.cdef # make sure cdef is generated from the source to check testing framework

          echo "REPORT_FILE=${REPORT_OUTPUT}" >> "$GITHUB_ENV"
          pytest --md-report --md-report-flavor gfm --md-report-output "$REPORT_OUTPUT"
      - name: Output reports to the job summary
        if: always()
        shell: bash
        run: |
          if [ -f "$REPORT_FILE" ]; then
            echo "## Test Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "Report file not found."
          fi
      - name: Render the report to the PR when tests fail
        uses: marocchino/sticky-pull-request-comment@v2
        if: failure()
        with:
          header: test-report
          recreate: true
          path: ${{ env.REPORT_FILE }}

  Compare_builds:
    needs: [Build_Windows, Build_Linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: firmware_from_windows
          path: firmware_from_windows
      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: firmware_from_linux
          path: firmware_from_linux
      - name: Compare build files
        run: |
          echo "Comparing build files"
          git diff firmware_from_windows/main.hex firmware_from_linux/main.hex --word-diff=color --ignore-space-at-eol --exit-code
          echo "Done comparing build files. Files are the same."

